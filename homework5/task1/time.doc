Письменный ответ на вопрос:  что из статьи https://machiel.me/post/time-in-go-a-primer/ стоило бы добавить в методичку


1) Получение отформатированной даты и времени

Существует два формата: собственный формат и формат, который предоставляет пакет time, с широким выбором стандартных форматов

const (
    ANSIC       = "Mon Jan _2 15:04:05 2006"
    UnixDate    = "Mon Jan _2 15:04:05 MST 2006"
    RubyDate    = "Mon Jan 02 15:04:05 -0700 2006"
    RFC822      = "02 Jan 06 15:04 MST"
    RFC822Z     = "02 Jan 06 15:04 -0700" // RFC822 with numeric zone
    RFC850      = "Monday, 02-Jan-06 15:04:05 MST"
    RFC1123     = "Mon, 02 Jan 2006 15:04:05 MST"
    RFC1123Z    = "Mon, 02 Jan 2006 15:04:05 -0700" // RFC1123 with numeric zone
    RFC3339     = "2006-01-02T15:04:05Z07:00"
    RFC3339Nano = "2006-01-02T15:04:05.999999999Z07:00"
    Kitchen     = "3:04PM"
    // Handy time stamps.
    Stamp      = "Jan _2 15:04:05"
    StampMilli = "Jan _2 15:04:05.000"
    StampMicro = "Jan _2 15:04:05.000000"
    StampNano  = "Jan _2 15:04:05.000000000"
)
Данные константы могут быть использованы следующим образом

package main

import (
    "fmt"
    "time"
)

func main() {
    t := time.Now()
    fmt.Println(t.Format(time.RFC822Z))
}

// Output: 26 Apr 16 08:10 +0200

2) Временные зоны

Как видно из примера выше, по умолчанию функция time.Now() использует смещение +0200. Go использует локальное время компьютера. 
Для того чтобы пользователи могли использовать другое локальное время, Go предоставляет функцию UTC()

UTC() - это не временная зона, а стандарт.
Пример использования 

package main

import (
    "fmt"
    "time"
)

func main() {
    t := time.Now().UTC()
    fmt.Println(t.Format(time.RFC822Z))
}

// Output: 26 Apr 16 06:10 +0000

Это то что можно положить в БД.  Теперь, если нужно показать время кому-то из Панамы, нужно следать следующее
package main

import (
    "fmt"
    "time"
)

func retrieveNormalizedTimeFromDataSource() time.Time {
    // Normally you'd fetch the time from a specific datasource here.
    return time.Date(2016, time.April, 26, 6, 10, 0, 0, time.UTC)
}

func main() {
    // Make sure to handle the error ;), omitted for brevity
    userLocation, _ := time.LoadLocation("America/Panama")
    t := retrieveNormalizedTimeFromDataSource()
    t = t.In(userLocation)
    fmt.Println(t.Format(time.RFC822Z))
}

// Output: 26 Apr 16 01:10 -0500

Мы можем так же определять свою собственную временную зону. 
Например:
package main

import (
    "fmt"
    "time"
)

func retrieveNormalizedTimeFromDataSource() time.Time {
    // Normally you'd fetch the time from a specific datasource here.
    return time.Date(2016, time.April, 26, 6, 10, 0, 0, time.UTC)
}

func main() {
    userLocation := time.FixedZone("example", 3600*8) // UTC +0800
    t := retrieveNormalizedTimeFromDataSource()
    t = t.In(userLocation)
    fmt.Println(t.Format(time.RFC822Z))
}

// Output: 26 Apr 16 14:10 +0800
3) Функция time.Parse()
Пример использования
package main

import (
    "fmt"
    "time"
)

func main() {
    t, _ := time.Parse("02-01-2006 15:04:05", "26-04-2016 08:10:23")
    fmt.Println(t.Format(time.RFC822Z))
}

// Output: 26 Apr 16 08:10 +0000

Как видно из примера, значение  26-04-2016 08:10:23 парсится относительно ссылочного времени 02-01-2006 15:04:05.
Не смотря на то, что на машине UTC+0200, время парсится как  UTC+0000. С этим надо быть очень внимательным.
Для того чтобы избежать таких ошибок, нужно добавить смещение следующим образом
package main

import (
    "fmt"
    "time"
)

func main() {
    t, _ := time.Parse("02-01-2006 15:04:05 -0700", "26-04-2016 08:10:23 +0200")
    fmt.Println(t.Format(time.RFC822Z))
}

// Output: 26 Apr 16 08:10 +0200
Или можно исползовать функцию ParceInLocation. Она работает таким же образом как Parce, кроме того, что нет необходимости определять локацию во втором параметре.
package main

import (
    "fmt"
    "time"
)

func main() {
    t, _ := time.ParseInLocation("02-01-2006 15:04:05", "26-04-2016 08:10:23", time.Local)
    fmt.Println(t.Format(time.RFC822Z))
}

// Output: 26 Apr 16 08:10 +0200

